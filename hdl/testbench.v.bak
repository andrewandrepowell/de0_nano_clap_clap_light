`timescale 1ns / 1ps

module testbench;
	 
	function integer clogb2 ( input integer bit_depth );                                   
		begin                                                                              
			for( clogb2=0; bit_depth>0; clogb2=clogb2+1 )                                      
				bit_depth = bit_depth >> 1;                                                    
		end                                                                                
	endfunction 
	
	localparam integer CLOCK_PERIOD=10;
	localparam integer SAMPLE_WIDTH=16;
	reg clock_sig=0;
	reg nreset_sig=0;
	wire spi_clock;
	wire spi_chipselect;
	reg spi_data=0;
	
	localparam integer IN_SAMPLE_TOTAL=128;
	integer in;
	integer out;
	reg [SAMPLE_WIDTH-1:0] in_samples [0:IN_SAMPLE_TOTAL-1];
    
	task wait_until_posedge( input signal, input amount );
		integer each_edge;
		begin
			for ( each_edge=0; each_edge<amount; each_edge=each_edge+1 )
				@ ( posedge signal );
		end
	endtask
    
	task automatic drive_spi( input [ SAMPLE_WIDTH-1:0 ] sample );
		automatic integer each_bit;
		begin
			@( negedge spi_chipselect );
			for ( each_bit=0; each_bit<SAMPLE_WIDTH; each_bit=each_bit+1 )
				begin
					@( negedge spi_clock );
					spi_data <= sample[ SAMPLE_WIDTH-1-each_bit ];
				end
		end
	endtask
 
//	task drive_axis;
//		begin
//			@ ( posedge clock );
//			dut2bench_ready <= 1;
//			@ ( posedge clock );
//			while ( dut2bench_valid==0 )
//				@ ( posedge clock );
//			dut2bench_ready <= 0;
//		end
//	endtask
 
	// DUT 
	top2 top2_inst (
	.clock(clock_sig) ,	
	.nreset(nreset_sig),	
	.spi_clock(spi_clock_sig),	
	.spi_chipselect(spi_chipselect_sig),
	.spi_data(spi_data_sig),	
	.toglite_state(toglite_state_sig));
        
    // Drive clock
    always 
        begin
            clock_sig <= !clock_sig;
            #(CLOCK_PERIOD/2);
        end
    
	// Testbench execution.
	initial
		begin: testbench_main
			// Declarations.
			integer each_word;
			// Load data into input sample  buffer.
			in  <= $fopen("../../../eclipse/generate_sims/nclap_3_ntrial_1.txt","r");
			wait_until_posedge(clock_sig,10);
//			$display("Loading input data...");
//			each_word = 0;
//			$fclose(in);
//			while (!$feof(in)) 
//				begin
//					in_samples[each_word] = $fscanf(in,"%h\n",in_samples[each_word]);
//					each_word = each_word+1;
//				end
//            integer each_word;
//            $display( "Starting Testbench application..." );
//            wait_until_posedge( clock, 10 );
//            nreset <= 1;
//            for ( each_word=2; each_word<12; each_word=each_word+1 )
//                begin
//                    drive_spi( each_word );
//                    drive_axis;
//                    $display( "data sent: %d, data received: %d", each_word, dut2bench_data );
//                    if ( each_word != dut2bench_data )
//                        begin
//                            $display( "Simulation failed! ");
//                            $finish;
//                        end
//                end
//            $display( "Finihed Testbench application..." );
            $finish;
        end
    
    
endmodule
