'''
Created on Oct 16, 2016

The purpose of this script is to connect to the
Nexys 4 DDR, acquire audio samples of claps, and
then save those audio samples as text files.

@author: andrewandrepowell2
'''

import socket, numpy, itertools, time #,sounddevice
from matplotlib import pyplot

class socket_wrap( object ):
    def __init__(self,*argv,**args): self.s = socket.socket(*argv,**args)
    def __enter__(self): return self.s 
    def __exit__(self,type_0,value,traceback): self.s.close()
    
def int2bytearray( val, size ):
    
    assert( isinstance(val,int) )
    assert( isinstance(size,int) )
    
    ba = bytearray()
    for _ in range( size ):
        ba.append( val&0xff )
        val >>= 8
    
    return ba

if __name__ == '__main__':
    
    # Important parameters.
    AUDIO_BUFFER_SIZE = 128*1024
    AUDIO_GET_SIGNAL_GRAB_TRIG = 2048
    AUDIO_GET_SIGNAL_CLOCK = 100e6
    AUDIO_SAMPLE_RATE = AUDIO_GET_SIGNAL_CLOCK/AUDIO_GET_SIGNAL_GRAB_TRIG
    DATA_CLAPS = [ 0 ]
    DATA_TRIALS = range( 1 )
    TCP_IP_ADDR = '192.168.1.10'
    TCP_PORT = 7
    TCP_RCBUF_SIZE = AUDIO_BUFFER_SIZE*2
    NUMPY_DATA_DT = numpy.dtype( numpy.int16 )
    
    # Create socket object.
    with socket_wrap( socket.AF_INET, socket.SOCK_STREAM ) as soc_obj:
        
        # Connect to server running on Nexys 4 DDR.
        soc_obj.connect( (TCP_IP_ADDR,TCP_PORT) )
        
        # Set the receive buffer size.
        soc_obj.setsockopt( socket.SOL_SOCKET, socket.SO_RCVBUF, TCP_RCBUF_SIZE )
        
        # Gather data based on number of claps and trial.
        for ( nclap, ntrial ) in itertools.product( DATA_CLAPS, DATA_TRIALS ):
        
            # Have the user get ready.
            print( 'Get ready to clap ' + repr(nclap) + 
                   ' time(s)! for trial ' + repr(ntrial) + '!' )
            time.sleep( 1 )
            print( 'Begin!' )
        
            # Send the number of desired samples.
            soc_obj.send( int2bytearray( AUDIO_BUFFER_SIZE, 4 ) )
            
            # Receive the data.
            data = ''
            while len(data) < TCP_RCBUF_SIZE:
                d = soc_obj.recv( TCP_RCBUF_SIZE-len(data) )
                data += d
            data = bytearray( data )
            
            # Convert the data back to its original type.
            data = numpy.frombuffer( data, dtype=NUMPY_DATA_DT )
            
            # Plot the data.
            fname = 'nclap_' + repr(nclap) + '_ntrial_' + repr(ntrial)
            pyplot.figure()
            pyplot.plot( data )
            pyplot.title( fname )
            
#             # Play the sound.
#             sounddevice.play( data, AUDIO_SAMPLE_RATE )
#             sounddevice.wait()
            
            # Save the data as a a compressed file.
            numpy.savez_compressed( fname, data )
        
    # Plot the data for checking
    pyplot.show()
        
    