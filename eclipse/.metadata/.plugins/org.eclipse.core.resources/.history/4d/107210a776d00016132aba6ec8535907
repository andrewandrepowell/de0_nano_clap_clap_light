'''
Created on Dec 28, 2016

@author: andrewandre
'''

import os
import numpy as np
from matplotlib import pyplot as pp

def plot_grid():
    pp.grid(b=True, which='major', color='k', linestyle='-', alpha=0.75)
    pp.grid(b=True, which='minor', color='k', linestyle='--', alpha=0.5)
    pp.minorticks_on()

if __name__ == '__main__':
    
    # Define the constants for the script.
    FILE_LOC = '../acquire_data'
    FILE_NCLAP = 0
    FILE_NTRIAL = 0
    FILE_BNAME = 'nclap_' + repr( FILE_NCLAP ) + '_ntrial_' + repr( FILE_NTRIAL )
    FILE_NAME = FILE_BNAME + '.npz'
    FILE_FULL_PATH = os.path.join( FILE_LOC, FILE_NAME )
    SAVE_NAME = FILE_BNAME + '.txt'
    ENERGY_SIGNAL_BIAS = -1919
    ENERGY_NAME = FILE_BNAME + '_energy.txt'
    ENERGY_SAMPLES_PER_ENERGY_SAMPLE = 4
    ENERGY_LAG = ENERGY_SAMPLES_PER_ENERGY_SAMPLE-1
    
    # Load file as data.
    with np.load( FILE_FULL_PATH ) as npz_obj:
        x_n = npz_obj[ 'arr_0' ]
    
    # Store signal as a list of hexidecimal values.
    with open( SAVE_NAME, 'w' ) as nf_obj:
        for x_n_ in x_n:
            nf_obj.write( hex(x_n_)[2:]+'\n' )
            
    # Define more parameters.
    delta_n = ENERGY_SAMPLES_PER_ENERGY_SAMPLE
    delta_n_L = ENERGY_LAG
    S_N = len( x_n )
    S_M = np.floor( S_N/(delta_n-delta_n_L) ).astype( np.int64 )
    
    # Generate the energy signal.
    x_n = np.append( x_n, np.zeros( delta_n ) )
    e_m = np.array( [ np.sum( np.square( 
        x_n[ m*(delta_n-delta_n_L):m*(delta_n-delta_n_L)+delta_n ]+ENERGY_SIGNAL_BIAS ) ) 
                     for m in range( S_M ) ] )
    e_m = e_m.astype( np.dtype( np.int64 ), copy=False )
    e_m = e_m[0:120]
    
    # Store energy signal as a list of decimal values.
    with open( ENERGY_NAME, 'w' ) as nf_obj:
        for e_m_ in e_m:
            nf_obj.write( repr(e_m_)+'\n' )
            
    # Display plots.
    pp.figure()
    pp.plot( x_n )
    pp.title( 'signal: avg=' + repr( np.mean(x_n) ) )
    plot_grid()
    pp.figure()
    pp.plot( e_m )
    pp.title( 'energy signal' )
    plot_grid()
    pp.show()
    
    
        
    